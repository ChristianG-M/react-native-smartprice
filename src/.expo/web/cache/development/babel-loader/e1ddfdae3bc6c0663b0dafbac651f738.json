{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getContent = getContent;\n\nvar _locale = require(\"./locale.context\");\n\nfunction getContent(contentMap) {\n  var _contentMap$locales, _contentMap$locales2;\n\n  var localeCode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _locale.DefaultLocaleCode;\n  var contentForLocaleCode = (_contentMap$locales = contentMap.locales) == null ? void 0 : _contentMap$locales.get(localeCode.toLowerCase());\n\n  if (contentForLocaleCode) {\n    return contentForLocaleCode;\n  }\n\n  var languageCode = localeCode.split('-')[0].toLowerCase();\n  var contentForLanguageCode = (_contentMap$locales2 = contentMap.locales) == null ? void 0 : _contentMap$locales2.get(languageCode);\n  return contentForLanguageCode || contentMap.defaultContent;\n}","map":{"version":3,"sources":["/Users/willhwang/Desktop/react-native-smartprice/src/src/component/utils/providers/locale/get-content.ts"],"names":["getContent","contentMap","localeCode","DefaultLocaleCode","contentForLocaleCode","locales","get","toLowerCase","languageCode","split","contentForLanguageCode","defaultContent"],"mappings":";;;;;AAEA;;AAOO,SAASA,UAAT,CACLC,UADK,EAGF;AAAA;;AAAA,MADHC,UACG,uEADkBC,yBAClB;AACH,MAAMC,oBAAoB,0BAAGH,UAAU,CAACI,OAAd,qBAAG,oBAAoBC,GAApB,CAC3BJ,UAAU,CAACK,WAAX,EAD2B,CAA7B;;AAGA,MAAIH,oBAAJ,EAA0B;AACxB,WAAOA,oBAAP;AACD;;AAED,MAAMI,YAAY,GAAGN,UAAU,CAACO,KAAX,CAAiB,GAAjB,EAAsB,CAAtB,EAAyBF,WAAzB,EAArB;AACA,MAAMG,sBAAsB,2BAAGT,UAAU,CAACI,OAAd,qBAAG,qBAAoBC,GAApB,CAAwBE,YAAxB,CAA/B;AAEA,SAAOE,sBAAsB,IAAIT,UAAU,CAACU,cAA5C;AACD","sourcesContent":["// Copyright 2020 Prescryptive Health, Inc.\n\nimport { DefaultLocaleCode } from './locale.context';\n\nexport interface IContentMap<T> {\n  readonly defaultContent: T;\n  readonly locales?: Map<string, T>;\n}\n\nexport function getContent<T>(\n  contentMap: IContentMap<T>,\n  localeCode: string = DefaultLocaleCode\n): T {\n  const contentForLocaleCode = contentMap.locales?.get(\n    localeCode.toLowerCase()\n  );\n  if (contentForLocaleCode) {\n    return contentForLocaleCode;\n  }\n\n  const languageCode = localeCode.split('-')[0].toLowerCase();\n  const contentForLanguageCode = contentMap.locales?.get(languageCode);\n\n  return contentForLanguageCode || contentMap.defaultContent;\n}\n"]},"metadata":{},"sourceType":"script"}