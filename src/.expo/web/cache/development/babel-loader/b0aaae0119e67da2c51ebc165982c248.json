{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useCurrentTheme = useCurrentTheme;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _extends3 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _react = require(\"react\");\n\nvar _theme = require(\"../../providers/theme/theme.context\");\n\nvar _getStyleSheet = require(\"../../providers/theme/get-style-sheet\");\n\nrequire(\"@expo/match-media\");\n\nvar _reactResponsive = require(\"react-responsive\");\n\nfunction GetScreenSize() {\n  var isLarge = (0, _reactResponsive.useMediaQuery)({\n    minDeviceWidth: 900\n  });\n  var isMedium = (0, _reactResponsive.useMediaQuery)({\n    minDeviceWidth: 600,\n    maxDeviceWidth: 899\n  });\n\n  if (isLarge) {\n    return 'Large';\n  }\n\n  if (isMedium) {\n    return 'Medium';\n  }\n\n  return 'Small';\n}\n\nfunction GetResponsiveStyles(styles, size) {\n  var baseStyleNames = Object.keys(styles).filter(function (styleName) {\n    return !(styleName.endsWith('Small') || styleName.endsWith('Medium') || styleName.endsWith('Large'));\n  });\n  var responsiveStyles = baseStyleNames.reduce(function (acc, curr) {\n    var key = curr;\n    var responsiveKey = \"\" + curr + size;\n    var x = (0, _extends3.default)({}, styles[responsiveKey] || styles[key]);\n    return (0, _extends3.default)({}, acc, (0, _defineProperty2.default)({}, key, x));\n  }, {});\n  return responsiveStyles;\n}\n\nfunction useCurrentTheme(stylesheetMap) {\n  var themeContext = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _theme.ThemeContext;\n\n  var _useContext = (0, _react.useContext)(themeContext),\n      themeName = _useContext.themeName,\n      setThemeName = _useContext.setThemeName;\n\n  var styles = (0, _getStyleSheet.getStyleSheet)(stylesheetMap, themeName);\n  var screenSize = GetScreenSize();\n  return {\n    styles: GetResponsiveStyles(styles, screenSize),\n    setThemeName: setThemeName,\n    themeName: themeName,\n    screenSize: screenSize\n  };\n}","map":{"version":3,"sources":["/Users/willhwang/Desktop/react-native-smartprice/src/src/component/utils/hooks/use-current-theme/use-current-theme.hook.ts"],"names":["GetScreenSize","isLarge","minDeviceWidth","isMedium","maxDeviceWidth","GetResponsiveStyles","styles","size","baseStyleNames","Object","keys","filter","styleName","endsWith","responsiveStyles","reduce","acc","curr","key","responsiveKey","x","useCurrentTheme","stylesheetMap","themeContext","ThemeContext","themeName","setThemeName","screenSize"],"mappings":";;;;;;;;;;;AAEA;;AAEA;;AAIA;;AAMA;;AACA;;AASA,SAASA,aAAT,GAAqC;AACnC,MAAMC,OAAO,GAAG,oCAAc;AAC5BC,IAAAA,cAAc,EAAE;AADY,GAAd,CAAhB;AAGA,MAAMC,QAAQ,GAAG,oCAAc;AAC7BD,IAAAA,cAAc,EAAE,GADa;AAE7BE,IAAAA,cAAc,EAAE;AAFa,GAAd,CAAjB;;AAIA,MAAIH,OAAJ,EAAa;AACX,WAAO,OAAP;AACD;;AACD,MAAIE,QAAJ,EAAc;AACZ,WAAO,QAAP;AACD;;AACD,SAAO,OAAP;AACD;;AAED,SAASE,mBAAT,CACEC,MADF,EAEEC,IAFF,EAG6B;AAC3B,MAAMC,cAAc,GAAGC,MAAM,CAACC,IAAP,CAAYJ,MAAZ,EAAoBK,MAApB,CAA2B,UAACC,SAAD,EAAe;AAC/D,WAAO,EACLA,SAAS,CAACC,QAAV,CAAmB,OAAnB,KACAD,SAAS,CAACC,QAAV,CAAmB,QAAnB,CADA,IAEAD,SAAS,CAACC,QAAV,CAAmB,OAAnB,CAHK,CAAP;AAKD,GANsB,CAAvB;AAQA,MAAMC,gBAAgB,GAAGN,cAAc,CAACO,MAAf,CAAsB,UAACC,GAAD,EAAMC,IAAN,EAAuB;AACpE,QAAMC,GAAG,GAAGD,IAAZ;AACA,QAAME,aAAa,QAAMF,IAAN,GAAaV,IAAhC;AACA,QAAMa,CAAC,8BAASd,MAAM,CAACa,aAAD,CAAN,IAAyBb,MAAM,CAACY,GAAD,CAAxC,CAAP;AACA,sCAAYF,GAAZ,oCAAkBE,GAAlB,EAAwBE,CAAxB;AACD,GALwB,EAKtB,EALsB,CAAzB;AAMA,SAAON,gBAAP;AACD;;AAEM,SAASO,eAAT,CACLC,aADK,EAGmB;AAAA,MADxBC,YACwB,uEADYC,mBACZ;;AAAA,oBACY,uBAAWD,YAAX,CADZ;AAAA,MAChBE,SADgB,eAChBA,SADgB;AAAA,MACLC,YADK,eACLA,YADK;;AAExB,MAAMpB,MAAM,GAAG,kCAAuBgB,aAAvB,EAAsCG,SAAtC,CAAf;AACA,MAAME,UAAU,GAAG3B,aAAa,EAAhC;AAEA,SAAO;AACLM,IAAAA,MAAM,EAAED,mBAAmB,CAAUC,MAAV,EAAkBqB,UAAlB,CADtB;AAELD,IAAAA,YAAY,EAAZA,YAFK;AAGLD,IAAAA,SAAS,EAATA,SAHK;AAILE,IAAAA,UAAU,EAAVA;AAJK,GAAP;AAMD","sourcesContent":["// Copyright 2020 Prescryptive Health, Inc.\n\nimport { useContext } from 'react';\nimport { StyleSheet } from 'react-native';\nimport {\n  IThemeContext,\n  ThemeContext,\n} from '../../providers/theme/theme.context';\nimport {\n  getStyleSheet,\n  IStyleSheetMap,\n} from '../../providers/theme/get-style-sheet';\nimport { ThemeName } from '../../theming/theme-name';\n\nimport '@expo/match-media';\nimport { useMediaQuery } from 'react-responsive';\n\nexport type ScreenSize = 'Small' | 'Medium' | 'Large';\n\nexport interface ICurrentTheme<TStyles> extends IThemeContext {\n  styles: StyleSheet.NamedStyles<TStyles>;\n  screenSize: ScreenSize;\n}\n\nfunction GetScreenSize(): ScreenSize {\n  const isLarge = useMediaQuery({\n    minDeviceWidth: 900,\n  });\n  const isMedium = useMediaQuery({\n    minDeviceWidth: 600,\n    maxDeviceWidth: 899,\n  });\n  if (isLarge) {\n    return 'Large';\n  }\n  if (isMedium) {\n    return 'Medium';\n  }\n  return 'Small';\n}\n\nfunction GetResponsiveStyles<T>(\n  styles: StyleSheet.NamedStyles<T>,\n  size: ScreenSize\n): StyleSheet.NamedStyles<T> {\n  const baseStyleNames = Object.keys(styles).filter((styleName) => {\n    return !(\n      styleName.endsWith('Small') ||\n      styleName.endsWith('Medium') ||\n      styleName.endsWith('Large')\n    );\n  });\n\n  const responsiveStyles = baseStyleNames.reduce((acc, curr: string) => {\n    const key = curr as keyof T;\n    const responsiveKey = `${curr}${size}` as keyof T;\n    const x = { ...(styles[responsiveKey] || styles[key]) };\n    return { ...acc, [key]: x };\n  }, {} as StyleSheet.NamedStyles<T>);\n  return responsiveStyles;\n}\n\nexport function useCurrentTheme<TStyles>(\n  stylesheetMap: IStyleSheetMap<TStyles, ThemeName>,\n  themeContext: typeof ThemeContext = ThemeContext\n): ICurrentTheme<TStyles> {\n  const { themeName, setThemeName } = useContext(themeContext);\n  const styles = getStyleSheet<TStyles>(stylesheetMap, themeName);\n  const screenSize = GetScreenSize();\n\n  return {\n    styles: GetResponsiveStyles<TStyles>(styles, screenSize),\n    setThemeName,\n    themeName,\n    screenSize,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}