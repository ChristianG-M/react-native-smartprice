{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DateMaskInput = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _baseInput = require(\"../../base-input/base-input\");\n\nvar _dateMaskInput = require(\"./date-mask-input.content\");\n\nvar _useCurrentContent2 = require(\"../../../utils/hooks/use-current-content/use-current-content.hook\");\n\nvar _this = this,\n    _jsxFileName = \"/Users/willhwang/Desktop/react-native-smartprice/src/src/component/inputs/mask-inputs/date-mask-input/date-mask-input.tsx\";\n\nvar DateMaskInput = function DateMaskInput(props) {\n  var date = props.date,\n      onDateChange = props.onDateChange,\n      textStyle = props.textStyle,\n      errorMessage = props.errorMessage,\n      errorMessageStyle = props.errorMessageStyle,\n      viewStyle = props.viewStyle;\n\n  var _useCurrentContent = (0, _useCurrentContent2.useCurrentContent)(_dateMaskInput.dateMaskInputContent),\n      content = _useCurrentContent.content;\n\n  var extractFromMask = function extractFromMask(value) {\n    var DateNumberMask = [/\\d/, /\\d/, /['/']/, /\\d/, /\\d/, /['/']/, /\\d/, /\\d/, /\\d/, /\\d/];\n    var arrayValue = value.split('');\n    var unMasked = arrayValue.map(function (substring, i) {\n      if (i > DateNumberMask.length - 1) {\n        return null;\n      }\n\n      var isMatch = DateNumberMask[i].exec(substring);\n\n      if (isMatch) {\n        if (isNaN(parseInt(substring, 10))) {\n          return null;\n        }\n\n        return substring;\n      } else {\n        if (!isNaN(parseInt(substring, 10))) {\n          return substring;\n        }\n\n        return null;\n      }\n    }).filter(function (n) {\n      return n !== null;\n    }).join('');\n    return {\n      unMasked: unMasked,\n      masked: maskValue(unMasked)\n    };\n  };\n\n  var maskValue = function maskValue(unMasked) {\n    var splited = unMasked.split('');\n    var length = splited.length;\n    var masked = '';\n\n    if (length === 0) {\n      return '';\n    }\n\n    splited.forEach(function (s, i) {\n      if (i === 0) {\n        masked += \"\" + s;\n      } else if (i === 1 && i !== length - 1) {\n        masked += s + \"/\";\n      } else if (i === 3 && i !== length - 1) {\n        masked += s + \"/\";\n      } else {\n        masked += s;\n      }\n    });\n    return masked;\n  };\n\n  var _useState = (0, _react.useState)(date),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      maskedDateNumber = _useState2[0],\n      setMaskedDateNumber = _useState2[1];\n\n  var onChangeHandler = function onChangeHandler(value) {\n    var _extractFromMask = extractFromMask(value),\n        unMasked = _extractFromMask.unMasked,\n        masked = _extractFromMask.masked;\n\n    if (onDateChange) {\n      var splited = unMasked.split('');\n      var formattedDate = \"\" + splited[0] + splited[1] + \"-\" + splited[2] + splited[3] + \"-\" + splited[4] + splited[5] + splited[6] + splited[7];\n      onDateChange(formattedDate);\n    }\n\n    setMaskedDateNumber(masked);\n  };\n\n  return _react.default.createElement(_baseInput.BaseInput, {\n    textStyle: textStyle,\n    containerStyle: viewStyle,\n    errorMessageStyle: errorMessageStyle,\n    value: maskedDateNumber,\n    onChangeText: onChangeHandler,\n    placeholder: content.placeholder,\n    errorMessage: errorMessage,\n    __self: _this,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 5\n    }\n  });\n};\n\nexports.DateMaskInput = DateMaskInput;","map":{"version":3,"sources":["/Users/willhwang/Desktop/react-native-smartprice/src/src/component/inputs/mask-inputs/date-mask-input/date-mask-input.tsx"],"names":["DateMaskInput","props","date","onDateChange","textStyle","errorMessage","errorMessageStyle","viewStyle","dateMaskInputContent","content","extractFromMask","value","DateNumberMask","arrayValue","split","unMasked","map","substring","i","length","isMatch","exec","isNaN","parseInt","filter","n","join","masked","maskValue","splited","forEach","s","maskedDateNumber","setMaskedDateNumber","onChangeHandler","formattedDate","placeholder"],"mappings":"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","sourcesContent":["// Copyright 2020 Prescryptive Health, Inc.\n\nimport React, { ReactElement, useState } from 'react';\nimport { TextStyle } from 'react-native';\nimport { BaseInput } from '../../base-input/base-input';\nimport {\n  dateMaskInputContent,\n  IDateMaskInputContent,\n} from './date-mask-input.content';\nimport { useCurrentContent } from '../../../utils/hooks/use-current-content/use-current-content.hook';\nimport { ViewStyle } from 'react-native';\n\nexport interface IDateMaskInputProps {\n  date: string;\n  onDateChange?: (phoneNumber: string) => void;\n  textStyle?: TextStyle;\n  viewStyle?: ViewStyle;\n  errorMessageStyle?: TextStyle;\n  errorMessage?: string;\n}\n\nexport const DateMaskInput = (props: IDateMaskInputProps): ReactElement => {\n  const {\n    date,\n    onDateChange,\n    textStyle,\n    errorMessage,\n    errorMessageStyle,\n    viewStyle,\n  } = props;\n\n  const { content } = useCurrentContent<IDateMaskInputContent>(\n    dateMaskInputContent\n  );\n\n  const extractFromMask = (value: string) => {\n    const DateNumberMask = [\n      /\\d/,\n      /\\d/,\n      /['/']/,\n      /\\d/,\n      /\\d/,\n      /['/']/,\n      /\\d/,\n      /\\d/,\n      /\\d/,\n      /\\d/,\n    ];\n\n    const arrayValue = value.split('');\n\n    const unMasked = arrayValue\n      .map((substring, i) => {\n        if (i > DateNumberMask.length - 1) {\n          return null;\n        }\n\n        const isMatch = DateNumberMask[i].exec(substring);\n\n        if (isMatch) {\n          if (isNaN(parseInt(substring, 10))) {\n            return null;\n          }\n          return substring;\n        } else {\n          if (!isNaN(parseInt(substring, 10))) {\n            return substring;\n          }\n\n          return null;\n        }\n      })\n      .filter((n) => n !== null)\n      .join('');\n\n    return { unMasked, masked: maskValue(unMasked) };\n  };\n\n  const maskValue = (unMasked: string) => {\n    const splited = unMasked.split('');\n    const length = splited.length;\n\n    let masked = '';\n\n    if (length === 0) {\n      return '';\n    }\n\n    splited.forEach((s, i) => {\n      if (i === 0) {\n        masked += `${s}`;\n      } else if (i === 1 && i !== length - 1) {\n        masked += `${s}/`;\n      } else if (i === 3 && i !== length - 1) {\n        masked += `${s}/`;\n      } else {\n        masked += s;\n      }\n    });\n\n    return masked;\n  };\n\n  const [maskedDateNumber, setMaskedDateNumber] = useState<string>(date);\n\n  const onChangeHandler = (value: string) => {\n    const { unMasked, masked } = extractFromMask(value);\n    if (onDateChange) {\n      const splited = unMasked.split('');\n      const formattedDate = `${splited[0]}${splited[1]}-${splited[2]}${splited[3]}-${splited[4]}${splited[5]}${splited[6]}${splited[7]}`;\n      onDateChange(formattedDate);\n    }\n    setMaskedDateNumber(masked);\n  };\n\n  return (\n    <BaseInput\n      textStyle={textStyle}\n      containerStyle={viewStyle}\n      errorMessageStyle={errorMessageStyle}\n      value={maskedDateNumber}\n      onChangeText={onChangeHandler}\n      placeholder={content.placeholder}\n      errorMessage={errorMessage}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"script"}