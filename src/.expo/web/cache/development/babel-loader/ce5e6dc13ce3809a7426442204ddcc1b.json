{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PhoneMaskInput = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _baseInput = require(\"../../base-input/base-input\");\n\nvar _phoneMaskInput = require(\"./phone-mask-input.content\");\n\nvar _useCurrentContent2 = require(\"../../../utils/hooks/use-current-content/use-current-content.hook\");\n\nvar _phoneNumber = require(\"../../../utils/formatters/phone-number.formatter.ts/phone-number.formatter\");\n\nvar _this = this,\n    _jsxFileName = \"/Users/willhwang/Desktop/react-native-smartprice/src/src/component/inputs/mask-inputs/phone-mask-input/phone-mask-input.tsx\";\n\nvar PhoneMaskInput = function PhoneMaskInput(props) {\n  var phoneNumber = props.phoneNumber,\n      onPhoneNumberChange = props.onPhoneNumberChange,\n      textStyle = props.textStyle,\n      errorMessage = props.errorMessage;\n\n  var _useCurrentContent = (0, _useCurrentContent2.useCurrentContent)(_phoneMaskInput.phoneMaskInputContent),\n      content = _useCurrentContent.content;\n\n  var extractFromMask = function extractFromMask(value) {\n    var PhoneNumberMask = [/['(']/, /[1-9]/, /\\d/, /\\d/, /[')']/, /[' ']/, /\\d/, /\\d/, /\\d/, /['\\-']/, /\\d/, /\\d/, /\\d/, /\\d/];\n    var arrayValue = value.split('');\n    var unMasked = arrayValue.map(function (substring, i) {\n      if (i > PhoneNumberMask.length - 1) {\n        return null;\n      }\n\n      var isMatch = PhoneNumberMask[i].exec(substring);\n\n      if (isMatch) {\n        if (isNaN(parseInt(substring, 10))) {\n          return null;\n        }\n\n        return substring;\n      } else {\n        if (!isNaN(parseInt(substring, 10))) {\n          return substring;\n        }\n\n        return null;\n      }\n    }).filter(function (n) {\n      return n !== null;\n    }).join('');\n    return {\n      unMasked: unMasked,\n      masked: maskValue(unMasked)\n    };\n  };\n\n  var maskValue = function maskValue(unMasked) {\n    var splited = unMasked.split('');\n    var length = splited.length;\n    var masked = '';\n\n    if (length === 0) {\n      return '';\n    }\n\n    splited.forEach(function (s, i) {\n      if (i === 0) {\n        masked += \"(\" + s;\n      } else if (i === 2 && i !== length - 1) {\n        masked += s + \") \";\n      } else if (i === 5 && i !== length - 1) {\n        masked += s + \"-\";\n      } else {\n        masked += s;\n      }\n    });\n    return masked;\n  };\n\n  var _useState = (0, _react.useState)(maskValue(_phoneNumber.PhoneNumberFormatter.clean(phoneNumber))),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      maskedPhoneNumber = _useState2[0],\n      setMaskedPhoneNumber = _useState2[1];\n\n  var onChangeHandler = function onChangeHandler(value) {\n    var _extractFromMask = extractFromMask(value),\n        unMasked = _extractFromMask.unMasked,\n        masked = _extractFromMask.masked;\n\n    if (onPhoneNumberChange) {\n      onPhoneNumberChange(unMasked);\n    }\n\n    setMaskedPhoneNumber(masked);\n  };\n\n  return _react.default.createElement(_baseInput.BaseInput, {\n    textStyle: textStyle,\n    value: maskedPhoneNumber,\n    onChangeText: onChangeHandler,\n    placeholder: content.placeholder,\n    errorMessage: errorMessage,\n    __self: _this,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 5\n    }\n  });\n};\n\nexports.PhoneMaskInput = PhoneMaskInput;","map":{"version":3,"sources":["/Users/willhwang/Desktop/react-native-smartprice/src/src/component/inputs/mask-inputs/phone-mask-input/phone-mask-input.tsx"],"names":["PhoneMaskInput","props","phoneNumber","onPhoneNumberChange","textStyle","errorMessage","phoneMaskInputContent","content","extractFromMask","value","PhoneNumberMask","arrayValue","split","unMasked","map","substring","i","length","isMatch","exec","isNaN","parseInt","filter","n","join","masked","maskValue","splited","forEach","s","PhoneNumberFormatter","clean","maskedPhoneNumber","setMaskedPhoneNumber","onChangeHandler","placeholder"],"mappings":";;;;;;;;;;;AAEA;;AAEA;;AACA;;AAIA;;AACA;;;;;AASO,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD,EAA+C;AAAA,MACnEC,WADmE,GACLD,KADK,CACnEC,WADmE;AAAA,MACtDC,mBADsD,GACLF,KADK,CACtDE,mBADsD;AAAA,MACjCC,SADiC,GACLH,KADK,CACjCG,SADiC;AAAA,MACtBC,YADsB,GACLJ,KADK,CACtBI,YADsB;;AAAA,2BAGvD,2CAClBC,qCADkB,CAHuD;AAAA,MAGnEC,OAHmE,sBAGnEA,OAHmE;;AAO3E,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAmB;AACzC,QAAMC,eAAe,GAAG,CACtB,OADsB,EAEtB,OAFsB,EAGtB,IAHsB,EAItB,IAJsB,EAKtB,OALsB,EAMtB,OANsB,EAOtB,IAPsB,EAQtB,IARsB,EAStB,IATsB,EAUtB,QAVsB,EAWtB,IAXsB,EAYtB,IAZsB,EAatB,IAbsB,EActB,IAdsB,CAAxB;AAiBA,QAAMC,UAAU,GAAGF,KAAK,CAACG,KAAN,CAAY,EAAZ,CAAnB;AAEA,QAAMC,QAAQ,GAAGF,UAAU,CACxBG,GADc,CACV,UAACC,SAAD,EAAYC,CAAZ,EAAkB;AACrB,UAAIA,CAAC,GAAGN,eAAe,CAACO,MAAhB,GAAyB,CAAjC,EAAoC;AAClC,eAAO,IAAP;AACD;;AAED,UAAMC,OAAO,GAAGR,eAAe,CAACM,CAAD,CAAf,CAAmBG,IAAnB,CAAwBJ,SAAxB,CAAhB;;AAEA,UAAIG,OAAJ,EAAa;AACX,YAAIE,KAAK,CAACC,QAAQ,CAACN,SAAD,EAAY,EAAZ,CAAT,CAAT,EAAoC;AAClC,iBAAO,IAAP;AACD;;AACD,eAAOA,SAAP;AACD,OALD,MAKO;AACL,YAAI,CAACK,KAAK,CAACC,QAAQ,CAACN,SAAD,EAAY,EAAZ,CAAT,CAAV,EAAqC;AACnC,iBAAOA,SAAP;AACD;;AAED,eAAO,IAAP;AACD;AACF,KApBc,EAqBdO,MArBc,CAqBP,UAACC,CAAD;AAAA,aAAOA,CAAC,KAAK,IAAb;AAAA,KArBO,EAsBdC,IAtBc,CAsBT,EAtBS,CAAjB;AAwBA,WAAO;AAAEX,MAAAA,QAAQ,EAARA,QAAF;AAAYY,MAAAA,MAAM,EAAEC,SAAS,CAACb,QAAD;AAA7B,KAAP;AACD,GA7CD;;AA+CA,MAAMa,SAAS,GAAG,SAAZA,SAAY,CAACb,QAAD,EAAsB;AACtC,QAAMc,OAAO,GAAGd,QAAQ,CAACD,KAAT,CAAe,EAAf,CAAhB;AACA,QAAMK,MAAM,GAAGU,OAAO,CAACV,MAAvB;AAEA,QAAIQ,MAAM,GAAG,EAAb;;AAEA,QAAIR,MAAM,KAAK,CAAf,EAAkB;AAChB,aAAO,EAAP;AACD;;AAEDU,IAAAA,OAAO,CAACC,OAAR,CAAgB,UAACC,CAAD,EAAIb,CAAJ,EAAU;AACxB,UAAIA,CAAC,KAAK,CAAV,EAAa;AACXS,QAAAA,MAAM,UAAQI,CAAd;AACD,OAFD,MAEO,IAAIb,CAAC,KAAK,CAAN,IAAWA,CAAC,KAAKC,MAAM,GAAG,CAA9B,EAAiC;AACtCQ,QAAAA,MAAM,IAAOI,CAAP,OAAN;AACD,OAFM,MAEA,IAAIb,CAAC,KAAK,CAAN,IAAWA,CAAC,KAAKC,MAAM,GAAG,CAA9B,EAAiC;AACtCQ,QAAAA,MAAM,IAAOI,CAAP,MAAN;AACD,OAFM,MAEA;AACLJ,QAAAA,MAAM,IAAII,CAAV;AACD;AACF,KAVD;AAYA,WAAOJ,MAAP;AACD,GAvBD;;AAtD2E,kBA+EzB,qBAChDC,SAAS,CAACI,kCAAqBC,KAArB,CAA2B7B,WAA3B,CAAD,CADuC,CA/EyB;AAAA;AAAA,MA+EpE8B,iBA/EoE;AAAA,MA+EjDC,oBA/EiD;;AAmF3E,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACzB,KAAD,EAAmB;AAAA,2BACZD,eAAe,CAACC,KAAD,CADH;AAAA,QACjCI,QADiC,oBACjCA,QADiC;AAAA,QACvBY,MADuB,oBACvBA,MADuB;;AAEzC,QAAItB,mBAAJ,EAAyB;AACvBA,MAAAA,mBAAmB,CAACU,QAAD,CAAnB;AACD;;AACDoB,IAAAA,oBAAoB,CAACR,MAAD,CAApB;AACD,GAND;;AAQA,SACE,6BAAC,oBAAD;AACE,IAAA,SAAS,EAAErB,SADb;AAEE,IAAA,KAAK,EAAE4B,iBAFT;AAGE,IAAA,YAAY,EAAEE,eAHhB;AAIE,IAAA,WAAW,EAAE3B,OAAO,CAAC4B,WAJvB;AAKE,IAAA,YAAY,EAAE9B,YALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AASD,CApGM","sourcesContent":["// Copyright 2020 Prescryptive Health, Inc.\n\nimport React, { ReactElement, useState } from 'react';\nimport { TextStyle } from 'react-native';\nimport { BaseInput } from '../../base-input/base-input';\nimport {\n  phoneMaskInputContent,\n  IPhoneMaskInputContent,\n} from './phone-mask-input.content';\nimport { useCurrentContent } from '../../../utils/hooks/use-current-content/use-current-content.hook';\nimport { PhoneNumberFormatter } from '../../../utils/formatters/phone-number.formatter.ts/phone-number.formatter';\n\nexport interface IPhoneMaskInputProps {\n  phoneNumber?: string;\n  onPhoneNumberChange?: (phoneNumber: string) => void;\n  textStyle?: TextStyle;\n  errorMessage?: string;\n}\n\nexport const PhoneMaskInput = (props: IPhoneMaskInputProps): ReactElement => {\n  const { phoneNumber, onPhoneNumberChange, textStyle, errorMessage } = props;\n\n  const { content } = useCurrentContent<IPhoneMaskInputContent>(\n    phoneMaskInputContent\n  );\n\n  const extractFromMask = (value: string) => {\n    const PhoneNumberMask = [\n      /['(']/,\n      /[1-9]/,\n      /\\d/,\n      /\\d/,\n      /[')']/,\n      /[' ']/,\n      /\\d/,\n      /\\d/,\n      /\\d/,\n      /['\\-']/,\n      /\\d/,\n      /\\d/,\n      /\\d/,\n      /\\d/,\n    ];\n\n    const arrayValue = value.split('');\n\n    const unMasked = arrayValue\n      .map((substring, i) => {\n        if (i > PhoneNumberMask.length - 1) {\n          return null;\n        }\n\n        const isMatch = PhoneNumberMask[i].exec(substring);\n\n        if (isMatch) {\n          if (isNaN(parseInt(substring, 10))) {\n            return null;\n          }\n          return substring;\n        } else {\n          if (!isNaN(parseInt(substring, 10))) {\n            return substring;\n          }\n\n          return null;\n        }\n      })\n      .filter((n) => n !== null)\n      .join('');\n\n    return { unMasked, masked: maskValue(unMasked) };\n  };\n\n  const maskValue = (unMasked: string) => {\n    const splited = unMasked.split('');\n    const length = splited.length;\n\n    let masked = '';\n\n    if (length === 0) {\n      return '';\n    }\n\n    splited.forEach((s, i) => {\n      if (i === 0) {\n        masked += `(${s}`;\n      } else if (i === 2 && i !== length - 1) {\n        masked += `${s}) `;\n      } else if (i === 5 && i !== length - 1) {\n        masked += `${s}-`;\n      } else {\n        masked += s;\n      }\n    });\n\n    return masked;\n  };\n\n  const [maskedPhoneNumber, setMaskedPhoneNumber] = useState<string>(\n    maskValue(PhoneNumberFormatter.clean(phoneNumber))\n  );\n\n  const onChangeHandler = (value: string) => {\n    const { unMasked, masked } = extractFromMask(value);\n    if (onPhoneNumberChange) {\n      onPhoneNumberChange(unMasked);\n    }\n    setMaskedPhoneNumber(masked);\n  };\n\n  return (\n    <BaseInput\n      textStyle={textStyle}\n      value={maskedPhoneNumber}\n      onChangeText={onChangeHandler}\n      placeholder={content.placeholder}\n      errorMessage={errorMessage}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"script"}